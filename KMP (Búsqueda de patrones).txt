vector<int> buildLPS(const string& pat) {
    int n = pat.size(), len = 0;
    vector<int> lps(n, 0);
    for (int i = 1; i < n;) {
        if (pat[i] == pat[len])
            lps[i++] = ++len;
        else if (len) len = lps[len - 1];
        else lps[i++] = 0;
    }
    return lps;
}
vector<int> KMP(const string& text, const string& pat) {
    vector<int> lps = buildLPS(pat), result;
    int i = 0, j = 0, n = text.size(), m = pat.size();
    while (i < n) {
        if (text[i] == pat[j]) i++, j++;
        if (j == m) result.push_back(i - j), j = lps[j - 1];
        else if (i < n && text[i] != pat[j])
            j ? j = lps[j - 1] : i++;
    }
    return result;
}
